{"version":3,"sources":["Services/Item.Service.ts"],"names":["ItemService","http","this","baseUrl","prototype","getLatest","num","url","get","map","response","json","catch","handleError","getMostViewed","getRandom","id","Error","res","error","console","Observable_1","Observable","throw","__decorate","core_1","Injectable","http_1","Http"],"mappings":"26BAMaA,YAAW,WACpB,QAAAA,aAAoBC,MAAAC,KAAAD,KAAAA,KAEZC,KAAAC,QAAU,cAqDtB,MAnDWH,aAAAI,UAAAC,UAAP,SAAiBC,KAEb,GAAIC,KAAML,KAAKC,QAAU,YAOzB,OALW,OAAPG,MAEAC,KAAOD,KAGJJ,KAAKD,KAAKO,IAAID,KAAKE,IAAI,SAAAC,UAAY,MAAAA,UAASC,SAAQC,MAAMV,KAAKW,cAGnEb,YAAAI,UAAAU,cAAP,SAAqBR,KAEjB,GAAIC,KAAML,KAAKC,QAAU,gBAMzB,OAJW,OAAPG,MACAC,KAAOD,KAGJJ,KAAKD,KAAKO,IAAID,KAAKE,IAAI,SAAAC,UAAY,MAAAA,UAASC,SAAQC,MAAMV,KAAKW,cAGnEb,YAAAI,UAAAW,UAAP,SAAiBT,KAEb,GAAIC,KAAML,KAAKC,QAAU,YAMzB,OAJW,OAAPG,MACAC,KAAOD,KAGJJ,KAAKD,KAAKO,IAAID,KAAKE,IAAI,SAAAC,UAAY,MAAAA,UAASC,SAAQC,MAAMV,KAAKW,cAGnEb,YAAAI,UAAAI,IAAP,SAAWQ,IAEP,GAAU,MAANA,GAEA,KAAM,IAAIC,OAAM,iBAGpB,IAAIV,KAAML,KAAKC,QAAUa,EAEzB,OAAOd,MAAKD,KAAKO,IAAID,KAAKE,IAAI,SAAAS,KAAO,MAAMA,KAAIP,SAAQC,MAAMV,KAAKW,cAG9Db,YAAAI,UAAAS,YAAR,SAAoBM,OAGhB,MADAC,SAAQD,MAAMA,OACPE,aAAAC,WAAWC,MAAMJ,MAAMR,OAAOQ,OAAS,iBAEtDnB,eAxDaA,YAAWwB,YADvBC,OAAAC,6CAE6BC,OAAAC,QADjB5B","file":"Services/Item.Service.js","sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { Http, Response } from \"@angular/http\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Item } from \"../Models/Item\";\r\n\r\n@Injectable()\r\nexport class ItemService {\r\n    constructor(private http: Http) { }\r\n\r\n    private baseUrl = \"/api/items/\";\r\n\r\n    public getLatest(num?: number)\r\n    {\r\n        var url = this.baseUrl + \"GetLatest/\";\r\n\r\n        if (num != null)\r\n        {\r\n            url += num;\r\n        }\r\n\r\n        return this.http.get(url).map(response => response.json()).catch(this.handleError);\r\n    }\r\n\r\n    public getMostViewed(num?: number)\r\n    {\r\n        var url = this.baseUrl + \"GetMostViewed/\";\r\n\r\n        if (num != null) {\r\n            url += num;\r\n        }\r\n\r\n        return this.http.get(url).map(response => response.json()).catch(this.handleError);\r\n    }\r\n\r\n    public getRandom(num?: number)\r\n    {\r\n        var url = this.baseUrl + \"GetRandom/\";\r\n\r\n        if (num != null) {\r\n            url += num;\r\n        }\r\n\r\n        return this.http.get(url).map(response => response.json()).catch(this.handleError);\r\n    }\r\n\r\n    public get(id: number)\r\n    {\r\n        if (id == null)\r\n        {\r\n            throw new Error(\"Id is required\");\r\n        }\r\n\r\n        var url = this.baseUrl + id;\r\n\r\n        return this.http.get(url).map(res => <Item>res.json()).catch(this.handleError);\r\n    }\r\n\r\n    private handleError(error: Response)\r\n    {\r\n        console.error(error);\r\n        return Observable.throw(error.json().error || \"Server error\");\r\n    }\r\n}"],"sourceRoot":"/source/"}